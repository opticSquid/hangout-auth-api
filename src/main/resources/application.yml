server:
  port: 5011
  servlet:
    context-path: /auth
spring:
  application:
    name: hangout-auth-service
  datasource:
    driverClassName: org.postgresql.Driver
    url: jdbc:postgresql://${DB_URL}/${DB_NAME}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}
  jpa:
    properties:
      hibernate:
        "[format_sql]": true
    hibernate:
      ddl-auto: update
    show-sql: true
  output:
    ansi:
      enabled: ALWAYS
  kafka:
    bootstrap-servers: ${KAFKA_SERVER}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    # properties:
    #   security.protocol: ${KAFKA_SECURITY_PROTOCOL}
    #   sasl.mechanism: ${KAFKA_SASL_MECHANISM}
    #   sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username="${KAFKA_USER}" password="$(kubectl get secret kafka-user-passwords --namespace persistance -o jsonpath='{.data.client-passwords}' | base64 -d | cut -d , -f 1)";

logging:
  level:
    web: error
    sql: error
    "[org.springframework.security]": error
    "[com.hangout.core]": trace
    # traceID and spanId are predefined MDC keys - we want the logs to include them
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

management:
  # All traces should be sent to latency analysis tool
  tracing:
    sampling:
      probability: 1.0
  otlp:
    # configures the endpoint to send OTLP metrics. (Does not support GRPC)
    metrics:
      export:
        url: ${OTEL_COLLECTOR}/v1/metrics
    tracing:
      compression: gzip

  endpoints:
    web:
      exposure:
        include: prometheus, health
  # For Exemplars to work we need histogram buckets
  metrics:
    distribution:
      percentiles-histogram:
        http:
          server:
            requests: true
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui

hangout:
  kafka:
    topic:
      verification-mail: account-verification
      activation-mail: account-activation
  jwt:
    secretKey:
      access: ${ACCESS_TOKEN_SECRET}
      refresh: ${REFRESH_TOKEN_SECRET}
  notification-service:
    url: ${NOTIFICATION_SERVICE}
  ip-api:
    url: ${IP_API_URL}
  otel-collector:
    url: ${OTEL_COLLECTOR}
  log:
    path: ${LOG_DIR}
  internal-services:
    origin: ${INTERNAL_SERVICES_ORIGIN}
